# 1 - If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
# The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.

n1 = 1000
multiples = []
(1..n1).each do |i|
  # first find all the multiples of 3 & 5, and place them in the multiples array
  multiples << i if i % 3 == 0 || i % 5 == 0
end
# then find the sum of the multiples array
return multiples.inject(:+)


# 2 - Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.

fib_seq = [1]
n2 = 2
# first create the fibonacci sequence
while n2 < 4000000 do
  fib_seq << n2
  n2 = fib_seq[-2] + n2
end
# then take only the even values from the sequence and add them up
even_seq = []
fib_seq.each { |i| even_seq << i if i % 2 == 0 }
return even_seq.inject(:+)


# 3 - The prime factors of 13195 are 5, 7, 13 and 29.
# What is the largest prime factor of the number 600851475143 ?

require 'prime'
n3 = 6008514143
count = -1
# find the greatest prime factor by ensuring the prime divisible is a single factor
until n3.prime_division[count].last == 1
  count = count - 1
end
return n3.prime_division[count].first


# 4 - A palindromic number reads the same both ways.
#The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
# Find the largest palindrome made from the product of two 3-digit numbers.

n4 = []
999.downto(100) do |i|
  999.downto(100) do |x|
    # starting at 999 go down to 100, and multiply against the same range
    # then if the product is a palindrome push it to the array
    n4 << i*x if i*x == (i*x).to_s.reverse.to_i
  end
end
# sort the array in ascending order and pick the last(largest) value
return n4.sort.last


# 5 - 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
# What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

n5 = 2520
until n5%1==0 && n5%2==0 && n5%3==0 && n5%4==0 && n5%5==0 && n5%6==0 && n5%7==0 && n5%8==0 && n5%9==0 && n5%10==0 && n5%11==0 && n5%12==0 && n5%13==0 && n5%14==0 && n5%15==0 && n5%16==0 && n5%17==0 && n5%18==0 && n5%19==0 && n5%20==0
  n5 += 1
end
return n5


# 6 - The sum of the squares of the first ten natural numbers is 12 + 22 + ... + 102 = 385
# The square of the sum of the first ten natural numbers is (1 + 2 + ... + 10)2 = 552 = 3025
# Hence the difference between the sum of the squares of the first ten natural numbers and 
# the square of the sum is 3025 − 385 = 2640.
# Find the difference between the sum of the squares of the first one hundred natural numbers 
# and the square of the sum.

n6 = 100
range = (1..n6)
squares = []
# create array of squared values and add them up
range.each {|i| squares << i * i }
sum_of_squares = squares.reduce(:+)
# square the sum of values
square_of_sum_of_range = range.reduce(:+) * range.reduce(:+)
return (square_of_sum_of_range - sum_of_squares)
